import csv
import time
from segment_tree import SegmentTree
def load_data():
    csv_reader = csv.reader(open("E:/2021_spring_graduation_project/卢兑玧/实验三/data.csv"))
    data0 = list(csv_reader)
    print("listed")
    print(len(data0))
    print(type(float(data0[1][2])))
    data0_p = []
    data0_ts = []
    for i in range(1,len(data0)):
        data0_p.append(float(data0[i][2]))
        data0_ts.append(float(data0[i][11]))
    return data0_p,data0_ts

def arr_chunk(ary, size_n):
    ini_start = 0
    res = []
    total_num = len(ary)
    while(ini_start < total_num):
        hk = 0
        for j in range(size_n):
            if ini_start+j < total_num:
                hk+=ary[ini_start+j]
        res.append(hk)
        ini_start+=size_n
    return res

def query_1_1(ary50, ary200, ary1000, ary5000, ary2):
    tr5000 = SegmentTree(ary5000)
    t11s = time.time()
    tr50 = SegmentTree(ary50)
    a1 = tr50.query(int(3000/50), int(5000/50)-1, 'sum')
    print(a1)
    t11e = time.time()
    print(t11e - t11s, end='  s\n')
    t12s = time.time()
    tr200 = SegmentTree(ary200)
    a2 = tr200.query(int(3000/200), int(5000/200)-1, 'sum')
    print(a2)
    t12e = time.time()
    print(t12e - t12s, end='  s\n')
    t13s = time.time()
    tr1000 = SegmentTree(ary1000)
    a3 = tr1000.query(int(3000/1000), int(5000/1000)-1, 'sum')
    print(a3)
    t13e = time.time()
    print(t13e - t13s, end='  s\n')
    t14s = time.time()
    trt1 = SegmentTree(ary2[0:50001])
    a4 = trt1.query(3000, 5000, 'sum')
    print(a4)
    t14e = time.time()
    print(t14e - t14s, end='  s\n')
    t15s = time.time()
    a5 = 0
    tr_t = SegmentTree(ary2)
    for i in range(3000, 5001):
        a5 += ary2[i]
    print(a5)
    t15e = time.time()
    print(t15e - t15s, end='  s\n')

#120550 125555 t  best:50
def query_2_1(ary50, ary200, ary1000, ary5000, ary2):
    tr5000 = SegmentTree(ary5000)
    t11s = time.time()
    tr50 = SegmentTree(ary50)
    a1 = tr50.query(int(120550/50), int(125555/50)-1, 'sum')
    print(a1)
    trt1 = SegmentTree(ary2[125550:125600])
    a1 += trt1.query(0, 5, 'sum')
    t11e = time.time()
    print(t11e - t11s, end='  s\n')
    t12s = time.time()
    tr200 = SegmentTree(ary200)
    a2 = tr200.query(int(120600/200), int(125555/200)-1, 'sum')
    trt2 = SegmentTree(ary2[120400:120600])
    a2 += trt2.query(150, 199, 'sum')
    trt3 = SegmentTree(ary2[125400:125600])
    a2 += trt3.query(0, 155, 'sum')
    print(a2)
    t12e = time.time()
    print(t12e - t12s, end='  s\n')
    t13s = time.time()
    tr1000 = SegmentTree(ary1000)
    a3 = tr1000.query(int(120000/1000), int(125555/1000)-1, 'sum')
    trt2 = SegmentTree(ary2[120000:121000])
    a3 += trt2.query(550, 999, 'sum')
    trt3 = SegmentTree(ary2[125000:126000])
    a3 += trt3.query(0, 555, 'sum')
    print(a3)
    t13e = time.time()
    print(t13e - t13s, end='  s\n')
    t14s = time.time()
    trt4 = arr_chunk(ary2, 5)
    a4 = trt4.query(int(120550/5), int(125555/5), 'sum')
    print(a4)
    t14e = time.time()
    print(t14e - t14s, end='  s\n')

#10000 500000 p  10000
def query_2_2(ary50, ary200, ary1000, ary5000, ary2):
    tr5000 = SegmentTree(ary5000)
    t11s = time.time()
    tr50 = SegmentTree(ary50)
    a1 = tr50.query(int(10000/50), int(500000/50)-1, 'sum')
    print(a1)
    t11e = time.time()
    print(t11e - t11s, end='  s\n')
    t12s = time.time()
    tr200 = SegmentTree(ary200)
    a2 = tr200.query(int(10000/200), int(500000/200)-1, 'sum')
    print(a2)
    t12e = time.time()
    print(t12e - t12s, end='  s\n')
    t13s = time.time()
    tr1000 = SegmentTree(ary1000)
    a3 = tr1000.query(int(10000/1000), int(500000/1000)-1, 'sum')
    print(a3)
    t13e = time.time()
    print(t13e - t13s, end='  s\n')
    t15s = time.time()
    tr5000 = SegmentTree(ary5000)
    a5 = tr5000.query(int(10000 / 5000), int(500000 / 5000) - 1, 'sum')
    print(a5)
    t15e = time.time()
    print(t15e - t15s, end='  s\n')
    t14s = time.time()
    trt4 = arr_chunk(ary2, 10000)
    a4 = trt4.query(1, int(500000/5)-1, 'sum')
    print(a4)
    t14e = time.time()
    print(t14e - t14s, end='  s\n')
    t16s = time.time()
    trt6 = arr_chunk(ary2, 50000)
    a6 = trt6.query(1, 9, 'sum')
    print(a6)
    trt7 = SegmentTree(ary2[0:50000])
    a6 += trt7.query(10000, 49999, 'sum')
    t16e = time.time()
    print(t16e - t16s, end='  s\n')


#170000 950000 t  10000
def query_2_3(ary50, ary200, ary1000, ary5000, ary2):
    tr5000 = SegmentTree(ary5000)
    t11s = time.time()
    tr50 = SegmentTree(ary50)
    a1 = tr50.query(int(170000/50), int(950000/50)-1, 'sum')
    print(a1)
    t11e = time.time()
    print(t11e - t11s, end='  s\n')
    t12s = time.time()
    tr200 = SegmentTree(ary200)
    a2 = tr200.query(int(170000/200), int(950000/200)-1, 'sum')
    print(a2)
    t12e = time.time()
    print(t12e - t12s, end='  s\n')
    t13s = time.time()
    tr1000 = SegmentTree(ary1000)
    a3 = tr1000.query(int(170000/1000), int(950000/1000)-1, 'sum')
    print(a3)
    t13e = time.time()
    print(t13e - t13s, end='  s\n')
    t15s = time.time()
    tr5000 = SegmentTree(ary5000)
    a5 = tr5000.query(int(170000 / 5000), int(950000 / 5000) - 1, 'sum')
    print(a5)
    t15e = time.time()
    print(t15e - t15s, end='  s\n')
    t14s = time.time()
    trt5 = arr_chunk(ary2, 10000)
    a4 = trt5.query(int(170000 / 10000), int(950000 / 10000) - 1, 'sum')
    print(a4)
    t14e = time.time()
    print(t14e - t14s, end='  s\n')
    t16s = time.time()
    trt6 = arr_chunk(ary2, 50000)
    a6 = trt6.query(int(170000 / 50000), int(950000 / 50000) - 1, 'sum')
    print(a6)
    trt7 = SegmentTree(ary2[150000:200000])
    a6 += trt7.query(20000, 49999, 'sum')
    t16e = time.time()
    print(t16e - t16s, end='  s\n')


#1 1048576  t   200000
def query_2_4(ary50, ary200, ary1000, ary5000, ary2):
    tr5000 = SegmentTree(ary5000)
    t11s = time.time()
    tr50 = SegmentTree(ary50)
    a1 = tr50.query(0, int(1048576 / 50) - 1, 'sum')
    print(a1)
    trt1 = SegmentTree(ary2[1048550:1048600])
    a1 += trt1.query(0, 26, 'sum')
    t11e = time.time()
    print(t11e - t11s, end='  s\n')
    t12s = time.time()
    tr200 = SegmentTree(ary200)
    a2 = tr200.query(0, int(1048576 / 200) - 1, 'sum')
    trt2 = SegmentTree(ary2[1048400:1048600])
    a2 += trt2.query(0, 176, 'sum')
    print(a2)
    t12e = time.time()
    print(t12e - t12s, end='  s\n')
    t13s = time.time()
    tr1000 = SegmentTree(ary1000)
    a3 = tr1000.query(0, int(1048576 / 1000) - 1, 'sum')
    trt2 = SegmentTree(ary2[1048000:1049000])
    a3 += trt2.query(0, 576, 'sum')
    print(a3)
    t13e = time.time()
    print(t13e - t13s, end='  s\n')
    t14s = time.time()
    tr5000 = SegmentTree(ary5000)
    a4 = tr1000.query(0, int(1048576 / 5000) - 1, 'sum')
    trt2 = SegmentTree(ary2[1045000:1050000])
    a4 += trt2.query(0, 3576, 'sum')
    print(a4)
    t14e = time.time()
    print(t14e - t14s, end='  s\n')


    t14s = time.time()
    trt4 = arr_chunk(ary2, 200000)
    a4 = trt4.query(int(120550 / 5), int(125555 / 5), 'sum')
    print(a4)
    trt2 = SegmentTree(ary2[1000000:1200000])
    a4 += trt2.query(0, 48576, 'sum')
    t14e = time.time()
    print(t14e - t14s, end='  s\n')



#89000 1000000 p 50000
def query_2_5(ary50, ary200, ary1000, ary5000, ary2):
    tr5000 = SegmentTree(ary5000)
    t11s = time.time()
    tr50 = SegmentTree(ary50)
    a1 = tr50.query(int(89000/50), int(1000000/50)-1, 'sum')
    print(a1)
    t11e = time.time()
    print(t11e - t11s, end='  s\n')
    t12s = time.time()
    tr200 = SegmentTree(ary200)
    a2 = tr200.query(int(89000/200), int(1000000/200)-1, 'sum')
    print(a2)
    t12e = time.time()
    print(t12e - t12s, end='  s\n')
    t13s = time.time()
    tr1000 = SegmentTree(ary1000)
    a3 = tr1000.query(int(89000/1000), int(1000000/1000)-1, 'sum')
    print(a3)
    t13e = time.time()
    print(t13e - t13s, end='  s\n')
    t15s = time.time()
    tr5000 = SegmentTree(ary5000)
    a5 = tr5000.query(int(90000/ 5000), int(1000000 / 5000) - 1, 'sum')
    trt1 = SegmentTree(ary2[85000:90000])
    a5 += trt1.query(4000,4999)
    print(a5)
    t15e = time.time()
    print(t15e - t15s, end='  s\n')
    t14s = time.time()
    trt5 = arr_chunk(ary2, 10000)
    a4 = trt5.query(int(90000 / 10000), int(1000000 / 10000) - 1, 'sum')
    trt1 = SegmentTree(ary2[80000:90000])
    a4 += trt1.query(9000, 9999)
    print(a4)
    t14e = time.time()
    print(t14e - t14s, end='  s\n')
    t16s = time.time()
    trt6 = arr_chunk(ary2, 50000)
    a6 = trt6.query(int(100000 / 50000), int(950000 / 50000) - 1, 'sum')
    print(a6)
    trt7 = SegmentTree(ary2[50000:100000])
    a6 += trt7.query(49000, 49999, 'sum')
    t16e = time.time()
    print(t16e - t16s, end='  s\n')
    t16s = time.time()
    trt6 = arr_chunk(ary2, 100000)
    a6 = trt6.query(int(100000 / 100000), int(900000 / 100000) - 1, 'sum')
    print(a6)
    trt7 = SegmentTree(ary2[0:100000])
    a6 += trt7.query(99000, 99999, 'sum')
    trt7 = SegmentTree(ary2[900000:1000000])
    a6 += trt7.query(0, 50000, 'sum')
    t16e = time.time()
    print(t16e - t16s, end='  s\n')


if __name__ == '__main__':
    data_p, data_ts = load_data()
    data_p_chunk_50 = arr_chunk(data_p, 50)
    data_p_chunk_200 = arr_chunk(data_p, 200)
    data_p_chunk_1000 = arr_chunk(data_p, 1000)
    data_p_chunk_5000 = arr_chunk(data_p, 5000)
    data_ts_chunk_50 = arr_chunk(data_ts, 50)
    data_ts_chunk_200 = arr_chunk(data_ts, 200)
    data_ts_chunk_1000 = arr_chunk(data_ts, 1000)
    data_ts_chunk_5000 = arr_chunk(data_ts, 5000)
    #query_1_1(data_p_chunk_50, data_p_chunk_200, data_p_chunk_1000, data_p_chunk_5000, data_p)
    #query_2_1(data_ts_chunk_50, data_ts_chunk_200, data_ts_chunk_1000, data_ts_chunk_5000, data_ts)
    #query_2_2(data_p_chunk_50, data_p_chunk_200, data_p_chunk_1000, data_p_chunk_5000, data_p)
    #query_2_3(data_ts_chunk_50, data_ts_chunk_200, data_ts_chunk_1000, data_ts_chunk_5000, data_ts)
    #query_2_4(data_ts_chunk_50, data_ts_chunk_200, data_ts_chunk_1000, data_ts_chunk_5000, data_ts)
    query_2_5(data_p_chunk_50, data_p_chunk_200, data_p_chunk_1000, data_p_chunk_5000, data_p)
    print(len(data_p_chunk_50))




